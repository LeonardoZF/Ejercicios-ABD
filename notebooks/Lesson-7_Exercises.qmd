---
title: "Tema 7: PEC"
format:
  html:
    code-copy:       true
    code-tools:      true
    df-print:        paged
    embed-resources: true
    theme:           ../www/extra-styles.scss
    toc:             true
    toc-location:    left
bibliography:        ../www/abd.bib
csl:                 ../www/apa-old-doi-prefix.csl
callout-appearance: minimal
---

# Introducción

En este tema hemos estudiado cómo obtener muestreas "identicamente distribuidas" (¡pero no necesariamente independientes!) de **cualquier distribución de probabilidad** gracias a la familia de algoritmos **Markov chain Monte Carlo** (MCMC).

Además, hemos aprendido acerca de la **dependencia serial** en las cadenas de Markov, cómo diagnosticarla, y su efecto en el **tamaño muestral efectivo de Monte Carlo**.

Estos ejercicios ponen en práctica estos conceptos con modelos de las lecturas, para afianzar estos conceptos.
En el [Ejercicio 1](#ejercicio-1) nos basaremos en el ejemplo del muestreador de Gibbs de @hoff2009a [pp. 98-103] para demostrar la lógica de ese algoritmo, así como las propiedades de una cadenas de Markov generada mediante el método de MCMC.

En el [Ejercicio 2](#ejercicio-2) tomaremos contacto con el software de análisis Bayesiano de datos [Stan](https://mc-stan.org/), utilizando un ejemplo del [texto de ampliación](https://agora.uned.es/mod/resource/view.php?id=514493) [@geyer2011, pp. 30-34].
Te recomiendo por tanto:

-   Realizar el [Ejercicio 1](#ejercicio-1) en primer lugar.

-   Leer a continuación el epígrafe 1.13 (A Metropolis Example) del [texto de ampliación](https://agora.uned.es/mod/resource/view.php?id=514493) [@geyer2011, pp. 30-34].

-   Por último, realizar el [Ejercicio 2](#ejercicio-2).

```{r setup}
#| message: false

# Paquetes:
library(tidyverse)
library(RColorBrewer)
library(scales)
library(rstan) # Nuevo paquete para el ejercicio 2 (añadir al entorno!)
library(coda)

# Configuración de la salida gráfica:

PALETA <- brewer.pal(8, "Set2") # Colores por defecto
color_defecto <- PALETA[1]      # Color por defecto
options(ggplot2.discrete.colour = PALETA)

theme_set(theme_bw()) # Tema "neutro" para la representación gráfica

# Redondea los números reales "inline":
options(digits = 3L)                
options(knitr.digits.signif = FALSE)

# Inicializa la semilla aleatoria:
set.seed(20250408)
```

Inicializamos el entorno como es habitual.
Al igual que en el ejercicio anterior, en este caso **también inicializamos la semilla aleatoria** para asegurar la **reproducibilidad**.

# Ejercicio 1: Cadena de Markov mediante muestreo de Gibbs {#ejercicio-1}

## Distribuciones condicionales

En la primera de las lecturas [@hoff2009a] hemos visto cómo muestrear de distribuciones condicionales.
Vamos a utilizar el ejemplo del epígrafe 6.6 en este ejercicio (pp. 98-103) para demostrar el "muestreo de Gibbs", las propiedades de las cadenas de Markov, y la convergencia.

Recuerda que la distribución que viene definida por[^1]

[^1]: Si te estás preguntando de dónde sale una distribución así, piensa que puede tratarse de una variable en la que hay tres grupos o "clases latentes", cada uno distribuido normalmente pero con medias diferentes; a modo de ejemplo: Usando el ejercicio sobre "velocidad de lectura" en temas anteriores, podríamos tener estudiantes pertenecientes a un grupo de "desarrollo típico" y otros dos grupos con diferentes trastornos de aprendizaje, cada uno teniendo un parámetro distinto para el valor promedio en velocidad de lectura, sin que conozcamos a priori a qué grupo pertenece cada estudiante.

$$
\begin{split}
  {Pr(δ = 1), Pr(δ = 2), Pr(δ = 3)} = (.45, .10, .45) \\
  p(θ|δ) = N(θ, μ_δ, σ_δ); \quad (μ_1, μ_2, μ_3) = (−3, 0, 3); \quad σ_1^2 = σ_2^2 = σ_3^2 = 1/3
\end{split}
$$

Podemos obtener la aproximación discreta a la distribución de $θ$, como hemos hecho en temas anteriores, para usarla como referencia:

```{r distribucion-discreta}
PREC       <- 1e-3             # Precisión para la aproximación discreta
PROB_DELTA <- c(.45, .10, .45) # Probabilidades de los tres grupos
MEDIAS     <- c(-3, 0, 3)      # Medias de los tres grupos en función de "delta"
VAR        <- 1/3              # Varianza de los tres grupos

sd      <- sqrt(VAR) # Desviación estándar de cada grupo
n_desv  <- 5 # Número de "desviaciones estándar" para calcular los límites
lim_inf <- floor(  min(MEDIAS) - n_desv * sd) # Límites para aproximación
lim_sup <- ceiling(max(MEDIAS) + n_desv * sd) #   discreta (inferior y superior)

# Aproximación discreta:
densidad <- tibble(
  theta    = seq(from = lim_inf, to = lim_sup, by = PREC),
  densidad = theta |> dnorm(mean = MEDIAS[1], sd = sd) * PROB_DELTA[1] +
             theta |> dnorm(mean = MEDIAS[2], sd = sd) * PROB_DELTA[2] +
             theta |> dnorm(mean = MEDIAS[3], sd = sd) * PROB_DELTA[3]
)

# Gráfica de la aproximación discreta:
aprox_discreta_plot <- densidad |>
  ggplot(mapping = aes(x = theta, y = densidad)) +
  geom_line(colour = color_defecto) +
  labs(
    title = "Distribución de θ",
    x = "θ",
    y = "p(θ)",
  )

aprox_discreta_plot
```

Tal y como la lectura indica, en esta distribución sería muy sencillo obtener una muestra de Monte Carlo i.i.d. Así que ten en cuenta que este ejercicio tiene un **propósito ilustrativo** sobre las **propiedades del muestreador de Gibbs**, y la aproximación de Monte Carlo que resulta de la cadena de Markov generada por este algoritmo.

### Pregunta 1

-   Dado un valor de $δ$, escibe a continuación una función que devuelva una única muestra aleatoria de $θ$ (i.e., una muestra de tamaño 1) de la distribución $p(θ|δ)$. Utiliza el prototipo de la función que se da a continuación, y los objetos globales definidos en el "chunk" de código anterior sin necesidad de definirlos de nuevo (`PROB_DELTA`, `MEDIAS`, `VAR`, o `sd`, según los necesites).

::: {#respuesta-1 .callout-note}
Lo que se pide es que la función produzca una muestra de la distribución condicional, entonces se tiene que:
$$\theta \mid \delta = j \sim \mathcal{N}(\mu_j, \sigma^2)$$
donde: $\mu_j$ es la media correspondiente al grupo $j$ (guardada en el vector `MEDIAS`; y $\sigma^2$ es la varianza común a los tres grupos, guardada en la variable `VAR`.

Para simular un único valor de $\theta$ dado un valor de $\delta$, se usa la función rnorm().
```{r}
muestrear_theta <- function(delta) {
  # Obtener la media correspondiente al grupo (1, 2 o 3)
  media <- MEDIAS[delta]
  # Simular la muestra de tamaño 1
  theta <- rnorm(n = 1, mean = media, sd = sd)
  return(theta)
}
```
:::

### Pregunta 2

-   Dado un valor de $θ$, escibe a continuación una función que devuelva una única muestra aleatoria de $δ$ (i.e., una muestra de tamaño 1) de la distribución $p(δ|θ)$, tal y como se indica en la ecuación de la p. 100 de @hoff2009a. Utiliza el prototipo de la función que se da a continuación, y los objetos globales definidos en el "chunk" de código anterior sin necesidad de definirlos de nuevo (`PROB_DELTA`, `MEDIAS`, `VAR`, o `sd`, según los necesites).

::: {#respuesta-2 .callout-note}
La fórmula a la que se hace alusión es:
$$\Pr(\delta = d \mid \theta) =
\frac{ \Pr(\delta = d) \cdot \text{dnorm}(\theta, \mu_d, \sigma_d) }
{ \sum_{j=1}^{3} \Pr(\delta = j) \cdot \text{dnorm}(\theta, \mu_j, \sigma_j) },
\quad \text{para } d \in \{1, 2, 3\}$$
donde:$\Pr(\delta = d)$ son las probabilidades previas (guardadas en `PROB_DELTA`); $\mu$ son las medias de cada grupo (guardadas en `MEDIAS`); y $\sigma$ es la desviación estándar común a los tres grupos (`sd`).
```{r}
muestrear_delta <- function(theta) {
  dist_delta_cond_theta <- PROB_DELTA * dnorm(theta, mean = MEDIAS, sd = sd) / #Numerador de ec. p.100
           sum(PROB_DELTA * dnorm(theta, mean = MEDIAS, sd = sd)) #Denominador de ec. p.100
  # Muestrear un valor de delta (1, 2 o 3) según esa distribución
  delta <- sample(x = 1:3, size = 1, prob = dist_delta_cond_theta)
  return(delta)
}
```
:::

## Muestreador de Gibbs

A continuación tienes una función que realiza una iteración del muestreador de Gibbs utilizando las dos funciones que acabas de escribir, devolviendo una muestra de tamaño 1 de la distribución conjunta $p(θ, δ)$.
Es decir, dado el estado actual de la cadena de Markov, la función devuelve el siguiente estado.

```{r definir-iteracion-Gibbs}
itera_Gibbs <- function(theta, delta) {
  
  # Muestra de theta:
  theta <- muestrear_theta(delta) # Observa que el valor "actual" de theta en
                                  #   realidad no se usa en esta función, pero
                                  #   lo usamos como argumento para definir el
                                  #   "estado actual completo" de la cadena.
  # Muestra de delta:
  delta <- muestrear_delta(theta)
  
  # Devuelve el nuevo estado de la cadena de Markov:
  tibble(theta = theta, delta = delta) # Usamos el tipo "tibble" para devolver a
                                       #   la vez un número real y un entero.
}
```

Ahora vamos a definir un objeto para "almacenar" los estados de la cadena de Markov.
Aunque podríamos ir "concatenando" las filas resultantes de cada estado, es mucho más eficiente (por cómo R maneja la memoria) definir un objeto de tamaño conocido e ir "rellenándolo" con los estados de la cadena.
Para ello, vamos a necesitar el número de iteraciones de la cadena, que fijaremos en 1,000, como en el ejemplo del libro.

```{r definir-cadena-Gibbs}
N_GIBBS <- 1000 # Número de iteraciones de la cadena de Markov

cadena_Gibbs <- tibble( # Objeto para almacenar los estados de la cadena
  theta = numeric(N_GIBBS),
  delta = integer(N_GIBBS)
)
```

Con los objetos anteriores, ya tenemos casi todo lo necesario para realizar el muestreo de Gibbs.
Solamente falta el estao inicial de la cadena.

### Pregunta 3

-   Define un objeto `estado_cadena` de tipo "tibble" para que contenga un estado inicial de la cadena de Markov que tenga una alta probabilidad de encontrarse en la distribución estacionaria. Para ello, selecciona un valor próximo a uno de los tres modos de la distribución de $θ$ y un valor adecuado de $δ$, justificando la elección de ambos.

::: {#respuesta-3 .callout-note}
Como estado inicial elegí el par $(\theta, \delta) = (-3, 1)$ porque tiene alta probabilidad bajo la distribución conjunta ya que $\delta = 1$ es uno de los grupos más probables (.45), y $\theta = -3$ es  la media del grupo 1, donde se concentra la mayor densidad. Pienso que bien podría haber sido el par $(\theta, \delta) = (3, 3)$ bajo el mismo razonamiento.
```{r}
estado_cadena <- tibble(
  theta = -3,
  delta = 1)
```
:::

### Pregunta 4

-   Escribe el código necesario para iterar la cadena de Markov, comenzando en el valor definido anteriormente de `estado_cadena`, y guardando los estados en el objeto `cadena_Gibbs`.

::: {#respuesta-4 .callout-note}
```{r}
# Guardar estado inicial en la primera fila de la cadena
cadena_Gibbs[1, ] <- estado_cadena

# Iteración
for (i in 2:N_GIBBS) { # La posición 1 ya se inicializó manualmente
  cadena_Gibbs[i, ] <- itera_Gibbs( #Generación de  nuevo estado aplicando la función
    theta = cadena_Gibbs$theta[i - 1], #valor anterior de theta
    delta = cadena_Gibbs$delta[i - 1] #valor anterior de delta
  )
}
```

:::

### Pregunta 5

-   Representa la densidad de la distribución de $θ$ obtenida a partir de la cadena de Markov junto con la aproximación discreta que obtuvimos antes. Explica qué observas en el resultado.

::: {#respuesta-5 .callout-note}
```{r}
cadena_Gibbs |> 
  ggplot(aes(x = theta)) +
  geom_density(color = "black") +  # densidad obtenida de la cadena
  geom_line(data = densidad, aes(x = theta, y = densidad), color = color_defecto) +  #aproximación discreta
  labs(
    title = expression("Distribución de " * theta * ": cadena vs. aproximación discreta"),
    x = expression(theta),
    y= "Densidad")
```
Se observa que ambas distribuciones tienen tres picos; sin embargo hay discrepancias sobre todo para los grupos 2 y 3. No entiendo por qué esto pasa. Tal vez con mayor número de muestras se podría obtener algo menos discrepante. 
:::

## Diagnósticos

### Pregunta 6

-   Usando las funciones indicadas en la p. 103 de @hoff2009a, representa la autocorrelación serial de los valores de $θ$ en la cadena y calcula el tamaño muestral efectivo de Monte Carlo.

*(NOTA: No olvides añadir el paquete `{coda}` en el entorno con el botón "renv" -\> "Snapshot Library...".)*

::: {#respuesta-6 .callout-note}
```{r}
# Convertir la cadena de theta a objeto mcmc para análisis
theta_mcmc <- as.mcmc(cadena_Gibbs$theta)

# Autocorrelación serial de theta
acf(theta_mcmc)

# Calcular tamaño muestral efectivo
ess <- effectiveSize(theta_mcmc)
ess

```
:::

### Pregunta 7

-   Define un objeto `cadena_Gibbs2`, de igual manera que definist `cadena_Gibbs`, y repite la pregunta 3, pero eligiendo un estado inicial en otro modo distinto. Después, genera una nueva cadena de Markov, almacenando sus estados en `cadena_Gibbs2` como en el ejercicio 4, y repite las representaciones y cálculos de los ejercicios 5 y 6.

::: {#respuesta-7 .callout-note}
```{r}
# Nuevo estado inicial
estado_cadena2 <- tibble(
  theta = 3,
  delta = 3)

# Crear nuevo objeto para almacenar la segunda cadena
cadena_Gibbs2 <- tibble(
  theta = numeric(N_GIBBS),
  delta = integer(N_GIBBS))

# Inicializar cadena
cadena_Gibbs2[1, ] <- estado_cadena2

# Muestreador Gibbs
for (i in 2:N_GIBBS) {
  cadena_Gibbs2[i, ] <- itera_Gibbs(
    theta = cadena_Gibbs2$theta[i - 1],
    delta = cadena_Gibbs2$delta[i - 1])
}

# Comparación gráfica
cadena_Gibbs2 |>
  ggplot(aes(x = theta)) +
  geom_density(color = "black") +  # densidad obtenida de la cadena
  geom_line(data = densidad, aes(x = theta, y = densidad), color = color_defecto) + # aproximación discreta
  labs(
    title = expression("Distribución de " * theta * ": cadena vs. aproximación discreta"),
    x = expression(theta),
    y= "Densidad")


# Autocorrelación y ESS
theta2_mcmc <- as.mcmc(cadena_Gibbs2$theta)

acf(theta2_mcmc)

ess_2 <- effectiveSize(theta2_mcmc)
ess_2
```

:::

### Pregunta 8

**ATENCIÓN: El siguiente ejercicio NO está basado en la lectura; presta especial atención.**

-   Consulta la ayuda de la función `gelman.diag()` del paquete `{coda}`. Después, completa el siguiente chunk para calcular el estadístico $R$ (diagnóstico de Gelman-Rubin) para los valores de $θ$ a partir de las dos cadena de Markov que acabas de generar e interprétalo.

::: {#respuesta-8 .callout-note}
```{r calcular-diagnostico-GR, eval=TRUE}
theta_Gibbs <- list(
  theta_Gibbs_1 = cadena_Gibbs  |> pull(theta) |> as.mcmc(),
  theta_Gibbs_2 = cadena_Gibbs2 |> pull(theta) |> as.mcmc()
)

# Diagnóstico Gelman-Rubin
gelman.diag(theta_Gibbs, confidence = 0.95, autoburnin = TRUE)
```
El estadístico de Gelman-Rubin obtenido fue $\hat{R} = 1.47$. Esto indica que las dos cadenas no han convergido adecuadamente, y que entonces no se ha explorado completamente el espacio.
:::

### Pregunta 9

-   De forma similar a como se ha hecho en la pregunta 7, obten dos cadenas de Markov de la distribución posterior conjunta de $p(θ, δ)$, pero con una longitud de 100,000 (ten paciencia, puede tardar un rato en hacer las iteraciones). Repite con estas dos nuevas cadenas los ejercicios 5, 6 y 8.

*(NOTA: Responde en el chunk de R proporcionado; la opción `#| cache: true` te ahorrará mucho tiempo de espera al renderizar el notebook después de hacerlo por primera vez.)*

::: {#respuesta-9 .callout-note}
```{r muestrear-Gibbs-100000, cache=TRUE}
#| cache: true # Guarda los resultados para no tener que ejecutar el "chunk"
               #   cada vez que se renderiza el notebook.

# Número de iteraciones aumentado
N_GIBBS_LONG <- 100000

# Crear objetos para las dos cadenas
cadena_LONG_1 <- tibble(theta = numeric(N_GIBBS_LONG), delta = integer(N_GIBBS_LONG))
cadena_LONG_2 <- tibble(theta = numeric(N_GIBBS_LONG), delta = integer(N_GIBBS_LONG))

# Usar estados iniciales ya definidos
cadena_LONG_1[1, ] <- estado_cadena
cadena_LONG_2[1, ] <- estado_cadena2

# Gibbs para cadena 1
for (i in 2:N_GIBBS_LONG) {
  cadena_LONG_1[i, ] <- itera_Gibbs(
    theta = cadena_LONG_1$theta[i - 1],
    delta = cadena_LONG_1$delta[i - 1])
}

# Gibbs para cadena 2
for (i in 2:N_GIBBS_LONG) {
  cadena_LONG_2[i, ] <- itera_Gibbs(
    theta = cadena_LONG_2$theta[i - 1],
    delta = cadena_LONG_2$delta[i - 1])
}

# Comparación gráfica de densidades
# Densidad cadena 1
cadena_LONG_1 |>
  ggplot(aes(x = theta)) +
  geom_density(color = "black") +
  geom_line(data = densidad, aes(x = theta, y = densidad), color = color_defecto) +
  labs(
    title = expression("Distribución de " * theta * ": cadena vs. aproximación discreta"),
    x = expression(theta),
    y= "Densidad")

# Densidad cadena 2
cadena_LONG_2 |>
  ggplot(aes(x = theta)) +
  geom_density(color = "black") +
  geom_line(data = densidad, aes(x = theta, y = densidad), color = color_defecto) +
  labs(
    title = expression("Distribución de " * theta * ": cadena vs. aproximación discreta"),
    x = expression(theta),
    y= "Densidad")

# Diagnóstico de autocorrelación y ESS
# Cadena 1
theta_mcmc_LONG_1 <- as.mcmc(cadena_LONG_1$theta)
acf(theta_mcmc_LONG_1)
ess_LONG_1 <- effectiveSize(theta_mcmc_LONG_1)
ess_LONG_1

# Cadena 2
theta_mcmc_LONG_2 <- as.mcmc(cadena_LONG_2$theta)
acf(theta_mcmc_LONG_2)
ess_LONG_2 <- effectiveSize(theta_mcmc_LONG_2)
ess_LONG_2

# Diagnóstico de Gelman-Rubin
theta_Gibbs_100k <- mcmc.list(theta_mcmc_LONG_1, theta_mcmc_LONG_2)
gelman.diag(theta_Gibbs_100k, confidence = 0.95, autoburnin = TRUE)
```
:::

### Pregunta 10

-   La pregunta 8 demuestra el uso del estadístico de convergencia de Gelman-Rubin para cadenas de Markov, pero hace una serie de supuestos que no siempre se cumplen. En base a la ayuda de `gelman.diag()`, ¿cómo interpretarías los resultados del estadístico $R$ obtenidos en estos casos? ¿Qué crees que ocurriría si lo calculamos con dos (o más) cadenas que convergen "parcialmente" a uno de los modos de la distribución únicamente?

::: {#respuesta-10 .callout-note}
El estadístico $\hat{R}$ compara las varianzas intra-cadena y entre cadenas. Si $\hat{R} \ >1$ quiere decir que las cadenas no han convergido. Al suponer que la distribución objetivo es aproximadamente normal, cuando se tiene una distribución como la que tenemos aquí (multimodal) puede ser que las estimaciones no sean del todo fiables. El estadístico no puede explicar el porqué de la falta de convergencia. No puede distinguir si es porque las cadenas aún no se han estabilizado dentro de un mismo modo o pico, o si simplemente están en diferentes regiones del espacio.
:::

## Distribución estacionaria

### Pregunta 11

-   Si crees que las cadenas en la pregunta 9 no han convergido satisfactoriamente a la distribución estacionaria, vuelve a ejecutarlas (quizá con mayor longitud) hasta obtener una convergencia sastisfactoria. Si consideras la convergencia de las cadenas satisfactoria (o una vez la consideres satisfactoria), colapsa los estados de ambas cadenas en un solo "data.frame" y obtén la densidad de $θ$ con las muestras de ambas cadenas.

::: {#respuesta-11 .callout-note}
```{r}
cadena_combinada <- bind_rows(cadena_LONG_1, cadena_LONG_2)

cadena_combinada |>
  ggplot(aes(x = theta)) +
  geom_density(color = "black") +
  labs(
    title = expression("Densidad de "*theta*" (muestras combinadas)"),
    x = expression(theta),
    y = "Densidad")

```

:::

# Ejercicio 2: Ajuste de un modelo en Stan {#ejercicio-2}

Ahora que tienes una noción de qué es una cadena de Markov y cómo puede utilizarse para aproximar una distribución posterior, vamos a estimar un modelo Bayesiano relativamente complejo.
Hasta ahora hemos demostrado la aproximación a una distribución conocida mediante el método MCMC.
Sin embargo, recuerda que podemos aproximar cualquier distribución posterior gracias al algoritmo Metropolis-Hastings.
Esto incluye aquellas para las que no conocemos su "verosimilitud marginal" o "constante de proporcionalidad" [recuerda la "fórmula de la proporcionalidad en la [lectura del Tema 3](https://agora.uned.es/mod/resource/view.php?id=506207), @puza2015a, pp. 13-18].

Para estimar este modelo, vamos a utilizar el software [Stan](https://mc-stan.org/).
Stan es un software de análisis Bayesiano de datos que utiliza internamente un algoritmo MCMC para realizar la aproximación numérica de la distribución posterior de un modelo.

Verás que Stan obtiene muestras MCMC de manera muy rápida en comparación con el ejemplo que vimos en el Ejercicio 1.
Esto se debe a que "convierte" la especificación de un modelo a "código compilado" en C++ (en lugar de "traducir" el código línea a línea, como hace el intérprete de R).
Pero para ello, es necesario instalar las "herramientas de compilación" de R.
Así que antes de comenzar a usar Stan, asegúrate de tener instalada la versión de RTools correspondiente a tu sistema operativo, siguiendo las [instrucciones en el repositorio de Rstan en GitHub](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started#configuring-c-toolchain).
Una vez hayas comprobado que Stan funciona, ejecutando el ejemplo según se indica en la sección [Verifying installation](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started#verifying-installation), continúa con el ejercicio.

## Regresión logística

En el [texto de ampliación del tema](https://agora.uned.es/mod/resource/view.php?id=514493) [@geyer2011, pp. 30-34] puedes ver un ejemplo de ajuste de un modelo de regresión logística Bayesiano, utilizando el paquete [`{mcmc}`](https://cran.r-project.org/package=mcmc) del propio autor.
Asegúrate de familiarizarte con el ejemplo, ya que lo utilizaremos en este ejercicio.

### Pregunta 12

-   Carga el dataset `logit` del paquete `{mcmc}`, explóralo, y explica su contenido.

*(NOTA: No olvides añadir el paquete `{mcmc}` al entorno.)*

::: {#respuesta-12 .callout-note}
```{r}
library(mcmc)
data(logit)
str(logit)
head(logit)
summary(logit)
```
La base de datos contiene 100 observaciones y 5 variables:`y`, la variable dependiente binaria (0 o 1); y `x1` a `x4`, los cuatro predictores continuos.
:::

### Pregunta 13

-   Utiliza el código proporcionado por el autor para ajustar el modelo lineal general con los datos y especificaciones del propio autor (p. 30) en un marco frecuentista. Comenta brevemente los resultados.

::: {#respuesta-13 .callout-note}
```{r}
out <- glm(y ~ x1 + x2 + x3 + x4, data = logit, family = binomial(), x = TRUE)
summary(out)

# Coeficientes estimados
coeficientes <- coef(out)

# Odds ratios
odds_ratios <- exp(coeficientes)

# Probabilidades correspondientes
probs <- odds_ratios / (1 + odds_ratios)

# Resultados
tabla_resultados <- tibble(
  Variable = names(coeficientes),
  Coef_Logit = round(coeficientes, 3),
  Odds_Ratio = round(odds_ratios, 3),
  Probabilidad_aprox = round(probs, 3)
)
tabla_resultados
```
Todos los coeficientes son positivos, lo que indica que un aumento en cualquiera de los predictores está asociado con un aumento en la probabilidad de tener 1 en la variarble `y`. Se muestra que `x1` y `x2` son los únicos predictores estadísticamente significativos del resultado `y`. 
En particular, `x2` tiene el mayor efecto: por cada unidad que aumenta `x2`, los odds de que $y = 1$ se multiplican por 3.05 (es decir, aumentan un 205%). Finalmente, cuando todos los predictores tienen valor cero, el modelo predice odds de 1.88 (intercepto), lo que corresponde a una probabilidad de éxito del 65.3%.
:::

## Especificación en Stan

El [archivo "src/geyer_2011_logistic.stan"](src/geyer_2011_logistic.stan) contiene la sintaxis en Stan equivalente al modelo de regresión logística en @geyer2011 [pp. 31-32].

La sintaxis de R a continuación ejecuta el modelo usando el paquete [`{rstan}`](https://cran.r-project.org/package=rstan).
Consulta la [guía de usuario de Stan](https://mc-stan.org/docs/2_36/stan-users-guide/) para familiarizarte con esta sintaxis.

```{r ajustar-modelo-Stan, eval=TRUE}
#| cache: true

# Configuración de Stan para mejorar la eficiencia:
options(mc.cores = parallel::detectCores()) # Computación en paralelo
rstan_options(auto_write = TRUE)            # Escribe el modelo compilado

# Datos de entrada al modelo
datos_logit <- list(
  y = logit |> pull(y),
  x = logit |> select(starts_with('x')),
  N = nrow(logit),
  K = ncol(logit) - 1L
)

# Ajustar el modelo
fit_logit_stan <- stan(
  file   = "../src/geyer_2011_logistic.stan",
  iter   = 1000L,
  chains =    4L,
  data   = datos_logit
)
```

### Pregunta 14

-   Fíjate en la sección `data` (líneas 2-7) en el modelo de Stan. En base a esto, explica la estructura del objeto `datos_logit`.

::: {#respuesta-14 .callout-note}
El objeto datos_logit es una lista con cuatro componentes:
N: un número entero que representa la cantidad total de observaciones.
K: un número entero que indica el número de variables predictoras.
x: una matriz numérica de dimensiones N × K, que contiene los valores de las variables predictoras.
y: un vector de longitud N con valores binarios (0 o 1), correspondiente a la variable respuesta.
:::

### Pregunta 15

-   Muestra el objeto `fit_logit_stan` y explica el significado del siguiente texto, de acuerdo a los términos que aparecen en las lecturas del tema:

    Inference for Stan model: anon_model.
    4 chains, each with iter=1000; warmup=500; thin=1; post-warmup draws per chain=500, total post-warmup draws=2000.

Explica también qué significan los valores e la columna `se_mean` y cómo se interpretan.

::: {#respuesta-15 .callout-note}
```{r}
fit_logit_stan
```
El output del objeto `fit_logit_stan` indica que el modelo fue ajustado usando 4 cadenas de Markov, cada una con 1000 iteraciones, de las cuales se descartaron las primeras 500 (fase de calentamiento). Y thin = 1 significa que se guarda cada muestra generada, es decir que no se descarta ninguna como sí sería si thin fuera otro número entero. No entiendo realmente la parte de post-warmup draws per chain=500, total post-warmup draws=2000, pero asumo que es lo complementario a las primeras 500 iteraciones. 
La columna `se_mean` representa el error estándar Monte Carlo de la media estimada del parámetro. Dado que los valores son bajos (alrededor de 0.01) puede decirse que la media posterior se ha estimado con buena precisión.
:::

### Pregunta 16

-   Explica cómo se diferencian las especificaciones del algoritmo en Stan anterior de las utilizadas por @geyer2011, en cuanto a número de cadenas, iteraciones, "burn-in", "thinning", y valores iniciales de las cadenas.

::: {#respuesta-16 .callout-note}
El algotirmo en Stan utiliza 4 cadenas con 500 iteraciones de warmup y sin thinning, mientras que en el ejemplo de Geyer (2011) se hace una sola cadena, sin aplicar burn-in ni thinning. En este ejemplo la cadena se inicia en el estimador de máxima verosimilitud mientras que Stan descarta iteraciones inciales (500).
:::

### Pregunta 17

-   ¿Podrías decir que las muestras del modelo aproximado con Stan representan adecuadamente la distribución posterior de los parámetros del modelo? ¿En qué te basas para afirmar / refutar que es así?

::: {#respuesta-17 .callout-note}
Pienso que sí pues las cuatro cadenas han convergido adecuadamente de acuerdo al estadístico $\hat{R}$, que es igual a 1. Los valores del tamaño muestral efectivo son grandes para todos los casos, y los errores estándar Monte Carlo son bajos también en todos los casos, es decir, que hay buena precisión. 

:::

## Interpretación del modelo

### Pregunta 18

-   Compara los resultados de ajustar el modelo en Stan con los del modelo frecuentista en el objeto `out`. ¿Qué parámetro equivale a cada cuál, y cómo son los valores?

::: {#respuesta-18 .callout-note}
Los parámetros del modelo Bayesiano ajustado en Stan (`alpha`, `beta[1]` a `beta[4]`) corresponden directamente con la intersección y los coeficientes de `x1` a `x4` en el modelo frecuentista, respectivamente. Los valores son muy similares en ambos enfoques.
:::

### Pregunta 19

-   Utiliza el método `plot()` para representar el modelo Bayesiano aproximado con Stan e interprétalo. ¿Qué se está mostrando en esta representación?

*(NOTA: Este método devuelve un objeto de clase "ggplot", por lo que puedes usar cualquier función de `{ggplot2}` para dar formato y estilo a la salida gráfica si quieres.)*

::: {#respuesta-19 .callout-note}
```{r}
plot(fit_logit_stan)
```
El gráfico representa los intervalos de credibilidad posteriores del 80% (líneas rojas) y del 95% (líneas negras) de cada parámetro del modelo logístico. Los puntos negros no me queda claro si representan la media o mediana posterior. Todos los parámetros muestran, como se vio previamente, efectos positivos pues se alejan del 0. 
:::

### Pregunta 20

-   El paquete [`{bayesplot}`](https://cran.r-project.org/package=bayesplot) proporciona gran variedad de funciones construidas sobre `{ggplot2}` para representar cadenas de Markov, distribuciones posteriores, etc. a partir de la salida de Stan. Revisa la ayuda del paquete y averigua cómo representar el "trazado" de las cadenas de Markov y las distribuciones posteriores de los parámetros e interpreta las salidas.

::: {#respuesta-20 .callout-note}
```{r}
# Convertir objeto fit_logit_stan a array para graficar
library(bayesplot)
fit_array <- as.array(fit_logit_stan)

# Traceplot
mcmc_trace(
  fit_array,
  pars = c("alpha", "beta[1]", "beta[2]", "beta[3]", "beta[4]"),
  facet_args = list(ncol = 1))

# Distribuciones posteriores
mcmc_dens_overlay(
  fit_array,
  pars = c("alpha", "beta[1]", "beta[2]", "beta[3]", "beta[4]"))
```
Con estos gráficos se evaluar visualmente la calidad del proceso MCMC. El trazado de las cadenas de Markov muestra que todas las han alcanzado estabilidad. Por otro lado, la visualización de las distribuciones posteriores muestra que las 4 cadenas han producido estimaciones similares para cada parámetro, lo que confirma la convergencia. Estos resultados, junto con el diagnóstico numérico previo apuntan a que el modelo ha sido ajustado correctamente y que las inferencias sobre los parámetros son fiables.
:::

## Salidas adicionales en Stan

La función `mcmc::metrop()` admite un argumento `outfun`, el cual es a su vez una función.
@geyer2011 [p. 33] utiliza este argumento para llamar a una función que admite un vector (argumento `z`, y devuelve ese mismo vector, pero añadiendo también sus valores al cuadrado).
De esta manera, además de los parámetros del modelo, la función `mcmc::metrop()` devuelve también esos mismos parámetros al cuadrado.

Fíjate en la sección [`generated quantities`](https://mc-stan.org/docs/reference-manual/blocks.html#program-block-generated-quantities) del [archivo con el modelo de Stan](src/geyer_2011_logistic.stan).

### Pregunta 21

-   Añade a la sección `generated quantities` del modelo en Stan el código necesario para que genere un valor real llamado `alpha_2`, con el valor al cuadrado de `alpha`, y un vector llamado `beta_2` con los valores al cuadrado de `beta`. Ayúdate de la [referencia de Stan sobre funciones reales](https://mc-stan.org/docs/functions-reference/real-valued_basic_functions.html). Después ejecuta el modelo en Stan de nuevo y comprueba si la salida ha generado los nuevos valores correctamente. Representa las distribuciones de estos nuevos valores.

::: {#respuesta-21 .callout-note}
```{r}
#| cache: true

fit_logit_stan_2 <- stan(
  file = "../src/geyer_2011_logistic.stan",
  data = datos_logit,
  iter = 1000,
  chains = 4
)

# Convertir a array para graficar
fit_array_2 <- as.array(fit_logit_stan_2)

# Distribuciones posteriores de alpha_2 y beta_2
mcmc_dens_overlay(fit_array_2, pars = c("alpha_2", "beta_2[1]", "beta_2[2]", "beta_2[3]", "beta_2[4]"))

```

:::

# Referencias
